package com.anzid.codegeneration.ksp.public_observer.templates

import com.anzid.codegeneration.ksp.public_observer.ObserverData
import com.anzid.codegeneration.ksp.public_observer.PublicObserverProcessor
import java.util.*

internal open class ObserverTemplate(protected val model: ObserverData) {

    protected val publicObserverName = model.fieldName.removePrefix("_")
    private val generatedDate = Date(System.currentTimeMillis()).toString()

    open fun getDefaultContent() = """
        |@file:AnzidGenerationCode(
        |    value = ["Generated by Anzid company", "${PublicObserverProcessor::class.java.name}"],
        |    date = "Generated date: $generatedDate"
        |)
        |
        |package ${model.pack}
        |
        |import com.anzid.annotation.AnzidGenerationCode
        |import androidx.lifecycle.LiveData
        |import kotlinx.coroutines.flow.SharedFlow
        |import kotlinx.coroutines.flow.StateFlow
        |import kotlinx.coroutines.flow.asSharedFlow
        |import kotlinx.coroutines.flow.asStateFlow
        |
        |${getAdditionalContent()}
    """.trimMargin()

    open fun getAdditionalContent() = """
      
        /**
         * @see ${model.className}.${model.fieldName}
         */
        @Suppress("UNCHECKED_CAST")
        ${model.propertyModifier}val ${model.className}.${publicObserverName} : ${model.publicType}
            get() {
                 val observerPrivate = javaClass.getDeclaredField("${model.fieldName}") 
                 observerPrivate.isAccessible = true 
                 val observer = observerPrivate.get(this) 
                 
                 return observer as ${model.publicType}
            }
        
    """.trimIndent()
}